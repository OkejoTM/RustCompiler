
#line 2 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 133
#define YY_END_OF_BUFFER 134
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[338] =
    {   0,
        0,    0,    0,    0,    0,    0,   90,   90,    0,    0,
      134,  132,    1,    2,   59,   95,   49,   57,  111,   79,
       80,   47,   45,   85,   46,   75,   48,  123,  123,   87,
       86,   53,   50,   54,  129,  129,   81,   82,   60,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,   83,   58,   84,  113,  122,  133,   96,
       97,  106,  133,   90,   92,   91,  108,  109,  110,   52,
       69,   63,   70,   67,   65,   66,   78,   76,   89,   94,
       68,  127,  123,  131,  131,  123,  131,  131,  131,  131,
      131,   88,   61,   55,   51,   56,   62,  130,  129,  129,

      129,   72,    3,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,   12,  129,  129,  129,   14,  129,
       16,  129,  129,  129,  129,  129,  129,  107,    0,  129,
      129,  129,  129,  129,  129,  129,  129,  129,   71,   64,
      113,  120,  119,  118,  114,  115,  116,  117,    0,    0,
       96,  103,  101,  102,   98,   99,  100,    0,    0,   90,
       91,   91,   93,  108,  110,   77,   94,  127,    0,  131,
        0,  128,  123,  131,  131,  131,  124,  131,  131,  131,
      131,  125,  126,   73,   74,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,   41,   42,  129,   13,   39,

       40,  129,   17,  129,  129,   20,  129,   22,   23,   24,
      129,  129,  129,  129,  129,  129,  129,  129,  129,   35,
      129,  129,    0,    0,    0,    0,  127,    0,    0,    0,
      128,  128,  131,  128,  123,  131,  131,   27,  129,   38,
      129,   44,  129,  129,  129,    8,    9,  129,  129,   15,
       18,  129,   21,  129,   26,  129,  129,  129,  129,   32,
       33,  129,  129,  129,    0,    0,    0,  105,    0,  127,
      127,  128,    0,  131,  131,  131,  131,  131,  131,  129,
        4,    5,  129,    7,  129,   11,   19,  129,  129,  129,
       30,   31,  129,   36,   37,    0,    0,  121,  112,    0,

        0,  104,  127,    0,    0,  124,  125,  126,   43,  129,
       10,   25,   28,   29,   34,    0,    0,    0,    0,  128,
      129,    0,    0,    0,    0,    6,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    5,    6,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   23,   25,   25,   26,   27,   28,
       29,   30,    1,    1,   31,   31,   31,   31,   32,   31,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   34,   33,   33,   33,   33,   33,   33,   33,
       35,   36,   37,   38,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   33,   49,   50,   51,   52,
       53,   54,   33,   55,   56,   57,   58,   59,   60,   61,
       62,   33,   63,   64,   65,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[66] =
    {   0,
        1,    2,    1,    3,    4,    1,    1,    1,    5,    1,
        1,    6,    7,    1,    7,    1,    1,    8,    8,    8,
        8,    8,    8,    8,    8,    1,    1,    1,    1,    1,
        9,   10,   11,   11,    1,   12,    1,    1,   13,    9,
        9,    9,    9,   10,   14,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,    1,    1,   15
    } ;

static const flex_int16_t yy_base[368] =
    {   0,
        0,    0,   57,   58,   66,   67,   68,   71,   72,   73,
      883,  895,  895,  895,  853,  895,  846,   68,  895,  895,
      895,  845,  838,  895,   52,  850,   67,   88,   64,  833,
      895,   57,  829,   58,  847,  110,  895,  895,  821,   95,
      111,  122,  120,  152,  158,  149,  148,   97,  153,  156,
      157,  159,  161,  895,  154,  895,    0,  895,  180,    0,
      895,  895,  212,    0,  895,   78,    0,  895,  837,  895,
      895,  895,  895,  895,  895,  895,  895,  813,  895,    0,
      895,  202,  133,    0,  261,  271,  210,   68,  147,  232,
      302,  895,  806,  895,  895,  895,  805,  895,  824,  183,

      176,  895,  823,  186,  192,  203,  236,  238,  241,  240,
      242,   96,  253,  254,  822,  256,  257,  296,  821,  180,
      816,  255,  261,  297,  305,  298,  264,  895,  257,  304,
      302,  313,  303,  325,  309,  324,  326,  327,  895,  895,
        0,  895,  895,  895,  895,  895,  895,  895,  756,  366,
        0,  895,  895,  895,  895,  895,  895,  749,  373,    0,
      106,  320,  895,    0,  805,  895,    0,  306,  315,    0,
      380,  388,    0,    0,  335,  345,  396,  785,  782,  783,
      780,  751,  750,  895,  895,  331,  368,  369,  377,  363,
      373,  374,  378,  370,  416,  793,  792,  419,  788,  787,

      781,  375,  780,  420,  422,  779,  424,  774,  773,  772,
      428,  432,  430,  433,  434,  435,  436,  437,  439,  767,
      438,  442,    0,    0,    0,    0,  413,  345,  750,  747,
      718,    0,  426,    0,    0,  427,  428,  758,  449,  756,
      450,  752,  451,  452,  458,  734,  721,  455,  459,  719,
      704,  457,  693,  461,  689,  463,  465,  462,  466,  684,
      676,  467,  469,  478,  433,  669,  449,  895,  506,  628,
      895,  621,  473,  639,  632,  633,  630,  631,  566,  472,
      581,  571,  480,  569,  481,  568,  567,  485,  492,  486,
      565,  563,  491,  515,  502,  476,  481,  895,  895,  482,

      497,  895,  317,  320,  250,    0,    0,    0,  262,  501,
      195,  191,  187,  174,   94,  499,  500,  501,  503,  895,
      505,  505,  509,  511,  512,   87,  513,  514,  515,  516,
      517,  518,  519,  521,  522,  524,  895,  589,  604,  619,
      634,  647,  661,  676,  691,  706,  721,  736,  744,  751,
      758,  765,  772,  779,  787,  793,  800,  808,  816,  823,
      831,  839,  847,  855,  863,  871,  879
    } ;

static const flex_int16_t yy_def[368] =
    {   0,
      337,    1,  338,  338,  339,  339,  340,  340,  341,  341,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,   28,  337,
      337,  337,  337,  337,  342,  342,  337,  337,  337,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  337,  337,  337,  343,  337,  337,  344,
      337,  337,  337,  345,  337,  346,  347,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  348,
      337,  337,   28,  349,  349,  349,  349,  349,  349,  349,
      349,  337,  337,  337,  337,  337,  337,  337,  342,  342,

      342,  337,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  337,  337,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  337,  337,
      343,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      344,  337,  337,  337,  337,  337,  337,  337,  337,  345,
      346,  346,  337,  347,  337,  337,  348,  350,  337,  349,
      337,  349,   86,   85,  349,  349,  349,  349,  349,  349,
      349,   90,   91,  337,  337,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,

      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  351,  352,  353,  354,  350,  355,  337,  337,
      356,  172,  349,  349,  349,  349,  349,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  357,  337,  358,  337,  337,  359,
      337,  356,  337,  349,  349,  349,  349,  349,  349,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  360,  357,  337,  337,  361,

      358,  337,  359,  337,  337,  349,  349,  349,  342,  342,
      342,  342,  342,  342,  342,  362,  360,  363,  361,  337,
      342,  364,  362,  365,  363,  342,  366,  364,  367,  365,
      337,  366,  337,  367,  337,  337,    0,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337
    } ;

static const flex_int16_t yy_nxt[961] =
    {   0,
       12,   13,   14,   15,   16,   12,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   29,
       29,   29,   29,   29,   29,   30,   31,   32,   33,   34,
       35,   35,   35,   36,   37,   12,   38,   39,   35,   40,
       41,   42,   35,   43,   44,   35,   35,   45,   35,   46,
       47,   35,   35,   48,   49,   50,   51,   52,   35,   53,
       35,   35,   54,   55,   56,   58,   58,   61,   61,   65,
       62,   62,   65,   68,   68,   72,   69,   69,   79,   66,
       76,   77,   66,   80,   93,   94,   96,   97,  178,  162,
       98,  179,   59,   59,  163,   81,   73,   98,   98,   98,

       98,   63,   63,   82,   84,   83,   83,   83,   83,   83,
       83,   83,   83,   98,   98,  196,   84,  337,   84,   85,
       84,   84,  337,   98,   84,   98,   86,   84,   87,   84,
       84,   85,   88,   84,   84,   89,   84,   84,   84,   84,
       90,   84,   84,   84,   84,   84,   84,   84,   91,   84,
      103,   98,   98,  100,  127,   98,   98,  128,  129,   98,
       98,   98,   98,  104,   98,  105,  101,  180,  106,  109,
      181,  110,  112,   84,  107,  113,  108,   98,  117,   98,
      111,  118,  139,   98,  142,   84,   98,  124,  143,   98,
       98,  114,  122,   84,   98,   98,  130,  144,   98,  131,

      125,  123,  119,  115,  116,  126,   98,  138,  120,  121,
      136,  134,  132,  133,  137,  145,  152,  140,  135,  168,
      168,  168,  168,  168,  168,  168,  168,  177,  177,  153,
      187,  146,  186,  202,  147,  189,  148,  149,  188,   98,
      150,   98,  190,   98,   98,   98,  169,  154,  177,  182,
      182,  182,  182,  182,  182,  182,   98,   98,   98,   98,
       98,  128,  129,  155,   98,   98,  156,   98,  157,  158,
      182,  320,  159,  171,  197,  171,  200,  192,  172,  172,
      172,  172,  172,  172,  172,  172,   82,  191,  173,  173,
      173,  173,  173,  173,  173,  173,  193,  194,  195,   98,

       98,   98,  174,  198,  209,   98,   98,   98,   98,  173,
      199,  203,   98,  204,  174,  175,   98,  201,  176,  183,
      183,  183,  183,  183,  183,  183,  183,   98,   98,   98,
       98,  162,  183,  183,   98,  229,  163,  228,  230,  320,
      183,  183,  183,  183,  183,  183,  183,  206,  210,  228,
      169,  212,  213,  205,  208,  178,  215,  269,  179,  269,
      211,  169,  218,  207,  216,  180,   98,  214,  181,  220,
      221,   98,   98,   98,  222,  238,   98,   98,   98,  219,
       98,   98,  217,  224,  224,  224,  224,  224,  224,  224,
      226,  226,  226,  226,  226,  226,  226,  231,  231,  231,

      231,  231,  231,  231,  231,  232,  232,  232,  232,  232,
      232,  232,  232,  177,  177,  239,  241,  242,  240,   98,
      247,  246,   98,   98,  250,   98,  232,   98,  243,  244,
      245,   98,  175,   98,  177,   98,   98,   98,   98,   98,
       98,   98,   98,  233,  228,   98,  274,  276,  278,  275,
      277,  279,   98,   98,   98,   98,  228,  169,   98,  248,
       98,   98,   98,  252,   98,   98,   98,  253,   98,   98,
       98,  297,   98,  251,  249,   98,  255,  258,  262,  260,
      261,   98,  259,   98,   98,  254,  256,  301,   98,   98,
      257,  264,  263,  304,   98,   98,  305,  298,  281,  283,

      280,  284,  286,  287,   98,   98,  290,  282,   98,  285,
      289,  293,  294,  302,  317,  288,  291,  309,   98,  297,
      319,  295,  292,  270,  270,  270,  270,  270,  270,  270,
      270,  310,  311,  313,  315,  301,  312,  323,  317,  325,
      298,  319,  314,  328,  270,  298,  302,  323,  326,  330,
      325,  332,  328,  334,  330,  335,  332,  336,  321,  334,
      335,  302,  336,  298,  298,  302,   98,  302,   98,  298,
       98,   98,   98,  298,   98,  302,  302,  298,  298,  302,
      302,  298,  298,  302,   98,  302,  298,  308,  302,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   99,
      308,  307,  307,  306,   99,   99,   99,   99,  306,   99,
       99,  141,  141,  141,  141,  273,  141,  141,  141,  141,
      141,  141,  169,  141,  141,  141,  151,  299,  151,   98,
      151,  151,  151,  151,  151,  151,  151,   98,  151,  151,
      151,  160,   98,  160,  160,  160,   98,  160,  160,  160,

      160,  160,  160,  160,  160,  160,  161,   98,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  164,   98,  164,   98,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  167,   98,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  170,  170,  170,  170,   98,  170,  170,  227,   98,
      227,   98,  273,  227,  227,  265,  265,  265,  271,  271,
       98,  265,  266,  266,  266,   98,   98,   98,  266,  267,
      267,  267,   98,   98,   98,  267,  268,  268,  268,  268,
       98,   98,  268,  270,  270,   98,   98,  237,  236,  270,

      272,  235,  235,  234,  234,  272,  272,  296,  296,  296,
      165,  225,  296,  296,  296,  300,  300,  300,  223,   98,
      300,  300,  300,  303,   98,   98,   98,   98,  303,  303,
      316,  316,  316,  185,  184,  316,  316,  316,  318,  318,
      318,  166,  165,  318,  318,  318,  322,  322,  322,  102,
       98,  322,  322,  322,  324,  324,  324,   95,   92,  324,
      324,  324,  327,  327,  327,   78,   75,  327,  327,  327,
      329,  329,  329,   74,   71,  329,  329,  329,  331,  331,
      331,   70,  337,  331,  331,  331,  333,  333,  333,  337,
      337,  333,  333,  333,   11,  337,  337,  337,  337,  337,

      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337
    } ;

static const flex_int16_t yy_chk[961] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,    5,    6,    7,
        5,    6,    8,    9,   10,   18,    9,   10,   27,    7,
       25,   25,    8,   27,   32,   32,   34,   34,   88,   66,
      326,   88,    3,    4,   66,   27,   18,  315,   40,  112,

       48,    5,    6,   28,   29,   28,   28,   28,   28,   28,
       28,   28,   28,   36,   41,  112,   29,  161,   28,   28,
       28,   28,  161,   43,   29,   42,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       40,   47,   46,   36,   48,   44,   49,   49,   49,   50,
       51,   45,   52,   41,   53,   41,   36,   89,   42,   43,
       89,   43,   44,   83,   42,   44,   42,  314,   45,  101,
       43,   45,   55,  120,   59,   83,  100,   47,   59,  104,
      313,   44,   46,   83,  312,  105,   49,   59,  311,   50,

       47,   46,   45,   44,   44,   47,  106,   53,   45,   45,
       52,   51,   50,   50,   52,   59,   63,   55,   51,   82,
       82,   82,   82,   82,   82,   82,   82,   87,   87,   63,
      101,   59,  100,  120,   59,  105,   59,   59,  104,  107,
       59,  108,  106,  110,  109,  111,   82,   63,   87,   90,
       90,   90,   90,   90,   90,   90,  113,  114,  122,  116,
      117,  129,  129,   63,  123,  309,   63,  127,   63,   63,
       90,  305,   63,   85,  113,   85,  117,  108,   85,   85,
       85,   85,   85,   85,   85,   85,   86,  107,   86,   86,
       86,   86,   86,   86,   86,   86,  109,  110,  111,  118,

      124,  126,   86,  114,  127,  131,  133,  130,  125,   86,
      116,  122,  135,  123,   86,   86,  132,  118,   86,   91,
       91,   91,   91,   91,   91,   91,   91,  136,  134,  137,
      138,  162,   91,   91,  186,  169,  162,  168,  169,  304,
       91,   91,   91,   91,   91,   91,   91,  125,  130,  168,
      168,  131,  132,  124,  126,  175,  133,  228,  175,  228,
      130,  303,  135,  125,  134,  176,  190,  132,  176,  137,
      138,  187,  188,  194,  138,  186,  191,  192,  202,  136,
      189,  193,  134,  150,  150,  150,  150,  150,  150,  150,
      159,  159,  159,  159,  159,  159,  159,  171,  171,  171,

      171,  171,  171,  171,  171,  172,  172,  172,  172,  172,
      172,  172,  172,  177,  177,  187,  189,  190,  188,  195,
      194,  193,  198,  204,  202,  205,  172,  207,  191,  191,
      192,  211,  172,  213,  177,  212,  214,  215,  216,  217,
      218,  221,  219,  177,  227,  222,  233,  236,  237,  233,
      236,  237,  239,  241,  243,  244,  227,  227,  248,  195,
      252,  245,  249,  205,  254,  258,  256,  207,  257,  259,
      262,  265,  263,  204,  198,  280,  212,  215,  219,  217,
      218,  264,  216,  283,  285,  211,  213,  267,  288,  290,
      214,  222,  221,  273,  293,  289,  273,  265,  241,  244,

      239,  245,  249,  252,  310,  295,  257,  243,  321,  248,
      256,  262,  263,  267,  296,  254,  258,  280,  294,  297,
      300,  264,  259,  269,  269,  269,  269,  269,  269,  269,
      269,  283,  285,  289,  293,  301,  288,  316,  317,  318,
      296,  319,  290,  322,  269,  297,  300,  323,  321,  324,
      325,  327,  328,  329,  330,  331,  332,  333,  310,  334,
      335,  301,  336,  316,  317,  318,  292,  319,  291,  322,
      287,  286,  284,  323,  282,  324,  325,  327,  328,  329,
      330,  331,  332,  333,  281,  334,  335,  279,  336,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  342,
      278,  277,  276,  275,  342,  342,  342,  342,  274,  342,
      342,  343,  343,  343,  343,  272,  343,  343,  343,  343,
      343,  343,  270,  343,  343,  343,  344,  266,  344,  261,
      344,  344,  344,  344,  344,  344,  344,  260,  344,  344,
      344,  345,  255,  345,  345,  345,  253,  345,  345,  345,

      345,  345,  345,  345,  345,  345,  346,  251,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  347,  250,  347,  247,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  348,  246,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  349,  349,  349,  349,  242,  349,  349,  350,  240,
      350,  238,  231,  350,  350,  351,  351,  351,  230,  229,
      220,  351,  352,  352,  352,  210,  209,  208,  352,  353,
      353,  353,  206,  203,  201,  353,  354,  354,  354,  354,
      200,  199,  354,  355,  355,  197,  196,  183,  182,  355,

      356,  181,  180,  179,  178,  356,  356,  357,  357,  357,
      165,  158,  357,  357,  357,  358,  358,  358,  149,  121,
      358,  358,  358,  359,  119,  115,  103,   99,  359,  359,
      360,  360,  360,   97,   93,  360,  360,  360,  361,  361,
      361,   78,   69,  361,  361,  361,  362,  362,  362,   39,
       35,  362,  362,  362,  363,  363,  363,   33,   30,  363,
      363,  363,  364,  364,  364,   26,   23,  364,  364,  364,
      365,  365,  365,   22,   17,  365,  365,  365,  366,  366,
      366,   15,   11,  366,  366,  366,  367,  367,  367,    0,
        0,  367,  367,  367,  337,  337,  337,  337,  337,  337,

      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[134] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "<stdin>"
#define YY_NO_UNISTD_H 1
 
 
 
 
#line 14 "<stdin>"
    #include <string>
    #include <algorithm>
    #include <charconv>
    #include <iostream>
    #include <cstdio>
    #include <cstring>
    #include <stdlib.h>

    using namespace std; 
     
    string currentString; 
    string currentCommentString;
    double currentFloat; 
    int currentInteger;
    char currentCharacter;
    int octothorpeCount = 0;   
    char buffer[10];
#line 824 "lex.yy.c"
#line 825 "lex.yy.c"

#define INITIAL 0
#define CHAR 1
#define STRING 2
#define ML_COMMENT 3
#define SHIELD_STRING 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 33 "<stdin>"

#line 35 "<stdin>"
 
 
    void removeCharacterFromString(string& str, char ch); 
    void removeSubstringFromString(string& str, const string& substr);
    void convertCharacterCodeToString(char characterCode[], int startPosition, char *result); 
 
 
#line 1056 "lex.yy.c"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 338 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 337 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 42 "<stdin>"
{ } 
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 43 "<stdin>"
{ } 
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 45 "<stdin>"
{ cout << "Found KW_AS: " << yytext << endl; } 
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 46 "<stdin>"
{ cout << "Found KW_BREAK: " << yytext << endl; } 
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 47 "<stdin>"
{ cout << "Found KW_CONST: " << yytext << endl; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 48 "<stdin>"
{ cout << "Found KW_CONTINUE: " << yytext << endl; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 49 "<stdin>"
{ cout << "Found KW_CRATE: " << yytext << endl; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 50 "<stdin>"
{ cout << "Found KW_ELSE: " << yytext << endl; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 51 "<stdin>"
{ cout << "Found KW_ENUM: " << yytext << endl; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 52 "<stdin>"
{ cout << "Found KW_EXTERN: " << yytext << endl; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 53 "<stdin>"
{ cout << "Found KW_FALSE: " << yytext << endl; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 54 "<stdin>"
{ cout << "Found KW_FN: " << yytext << endl; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 55 "<stdin>"
{ cout << "Found KW_FOR: " << yytext << endl; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 56 "<stdin>"
{ cout << "Found KW_IF: " << yytext << endl; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 57 "<stdin>"
{ cout << "Found KW_IMPL: " << yytext << endl; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 58 "<stdin>"
{ cout << "Found KW_IN: " << yytext << endl; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 59 "<stdin>"
{ cout << "Found KW_LET: " << yytext << endl; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 60 "<stdin>"
{ cout << "Found KW_LOOP: " << yytext << endl; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 61 "<stdin>"
{ cout << "Found KW_MATCH: " << yytext << endl; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 62 "<stdin>"
{ cout << "Found KW_MOD: " << yytext << endl; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 63 "<stdin>"
{ cout << "Found KW_MOVE: " << yytext << endl; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 64 "<stdin>"
{ cout << "Found KW_MUT: " << yytext << endl; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 65 "<stdin>"
{ cout << "Found KW_PUB: " << yytext << endl; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 66 "<stdin>"
{ cout << "Found KW_REF: " << yytext << endl; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 67 "<stdin>"
{ cout << "Found KW_RETURN: " << yytext << endl; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 68 "<stdin>"
{ cout << "Found KW_SELFVALUE: " << yytext << endl; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 69 "<stdin>"
{ cout << "Found KW_SELFTYPE: " << yytext << endl; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 70 "<stdin>"
{ cout << "Found KW_STATIC: " << yytext << endl; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 71 "<stdin>"
{ cout << "Found KW_STRUCT: " << yytext << endl; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 72 "<stdin>"
{ cout << "Found KW_SUPER: " << yytext << endl; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 73 "<stdin>"
{ cout << "Found KW_TRAIT: " << yytext << endl; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 74 "<stdin>"
{ cout << "Found KW_TRUE: " << yytext << endl; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 75 "<stdin>"
{ cout << "Found KW_TYPE: " << yytext << endl; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 76 "<stdin>"
{ cout << "Found KW_UNSAFE: " << yytext << endl; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 77 "<stdin>"
{ cout << "Found KW_USE: " << yytext << endl; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 78 "<stdin>"
{ cout << "Found KW_WHERE: " << yytext << endl; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 79 "<stdin>"
{ cout << "Found KW_WHILE: " << yytext << endl; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 82 "<stdin>"
{ cout << "Found TYPE_BOOL: " << yytext << endl; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 83 "<stdin>"
{ cout << "Found TYPE_I32: " << yytext << endl; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 84 "<stdin>"
{ cout << "Found TYPE_I64: " << yytext << endl; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 85 "<stdin>"
{ cout << "Found TYPE_F32: " << yytext << endl; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 86 "<stdin>"
{ cout << "Found TYPE_F64: " << yytext << endl; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 87 "<stdin>"
{ cout << "Found TYPE_STRING: " << yytext << endl; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 88 "<stdin>"
{ cout << "Found TYPE_CHAR: " << yytext << endl; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 91 "<stdin>"
{ cout << "Found OPERATOR_PLUS: " << yytext << endl; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 92 "<stdin>"
{ cout << "Found OPERATOR_MINUS: " << yytext << endl; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 93 "<stdin>"
{ cout << "Found OPERATOR_MUL: " << yytext << endl; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 94 "<stdin>"
{ cout << "Found OPERATOR_DIV: " << yytext << endl; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 95 "<stdin>"
{ cout << "Found OPERATOR_MOD: " << yytext << endl; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 97 "<stdin>"
{ cout << "Found OPERATOR_ASSIGNMENT: " << yytext << endl; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 98 "<stdin>"
{ cout << "Found OPERATOR_EQUAL: " << yytext << endl; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 99 "<stdin>"
{ cout << "Found OPERATOR_NOT_EQUAL: " << yytext << endl; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 100 "<stdin>"
{ cout << "Found OPERATOR_LESS: " << yytext << endl; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 101 "<stdin>"
{ cout << "Found OPERATOR_MORE: " << yytext << endl; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 102 "<stdin>"
{ cout << "Found OPERATOR_LESS_OR_EQUAL: " << yytext << endl; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 103 "<stdin>"
{ cout << "Found OPERATOR_MORE_OR_EQUAL: " << yytext << endl; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 105 "<stdin>"
{ cout << "Found OPERATOR_AMPERSAND: " << yytext << endl; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 106 "<stdin>"
{ cout << "Found OPERATOR_BIT_OR: " << yytext << endl; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 107 "<stdin>"
{ cout << "Found OPERATOR_BIT_NOT: " << yytext << endl; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 108 "<stdin>"
{ cout << "Found OPERATOR_BIT_XOR: " << yytext << endl; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 109 "<stdin>"
{ cout << "Found OPERATOR_BIT_LEFT_SHIFT: " << yytext << endl; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 110 "<stdin>"
{ cout << "Found OPERATOR_BIT_RIGHT_SHIFT: " << yytext << endl; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 113 "<stdin>"
{ cout << "Found OPERATOR_AND: " << yytext << endl; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 114 "<stdin>"
{ cout << "Found OPERATOR_OR: " << yytext << endl; } 
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 116 "<stdin>"
{ cout << "Found OPERATOR_PLUS_ASSIGNMENT: " << yytext << endl; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 117 "<stdin>"
{ cout << "Found OPERATOR_MINUS_ASSIGNMENT: " << yytext << endl; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 118 "<stdin>"
{ cout << "Found OPERATOR_MUL_ASSIGNMENT: " << yytext << endl; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 120 "<stdin>"
{ cout << "Found OPERATOR_DIV_ASSIGNMENT: " << yytext << endl; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 121 "<stdin>"
{ cout << "Found OPERATOR_MOD_ASSIGNMENT: " << yytext << endl; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 122 "<stdin>"
{ cout << "Found OPERATOR_BIT_AND_ASSIGNMENT: " << yytext << endl; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 123 "<stdin>"
{ cout << "Found OPERATOR_BIT_OR_ASSIGNMENT: " << yytext << endl; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 124 "<stdin>"
{ cout << "Found OPERATOR_BIT_XOR_ASSIGNMENT: " << yytext << endl; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 125 "<stdin>"
{ cout << "Found OPERATOR_BIT_LEFT_SHIFT_ASSIGNMENT: " << yytext << endl; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 126 "<stdin>"
{ cout << "Found OPERATOR_BIT_RIGHT_SHIFT_ASSIGNMENT: " << yytext << endl; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "<stdin>"
{ cout << "Found OPERATOR_POINT: " << yytext << endl; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "<stdin>"
{ cout << "Found OPERATOR_RANGE: " << yytext << endl; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "<stdin>"
{ cout << "Found OPERATOR_RANGE_ASSIGNMENT: " << yytext << endl; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 132 "<stdin>"
{ cout << "Found OPERATOR_ARROW: " << yytext << endl; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 135 "<stdin>"
{ cout << "Found LEFT_ROUND_BRACKET: " << yytext << endl; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 136 "<stdin>"
{ cout << "Found RIGHT_ROUND_BRACKET: " << yytext << endl; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 137 "<stdin>"
{ cout << "Found LEFT_SQUARE_BRACKET: " << yytext << endl; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 138 "<stdin>"
{ cout << "Found RIGHT_SQUARE_BRACKET: " << yytext << endl; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 139 "<stdin>"
{ cout << "Found LEFT_FIGURE_BRACKET: " << yytext << endl; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 140 "<stdin>"
{ cout << "Found RIGHT_FIGURE_BRACKET: " << yytext << endl; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 143 "<stdin>"
{ cout << "Found COMMA: " << yytext << endl; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 144 "<stdin>"
{ cout << "Found SEMICOLON: " << yytext << endl; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 145 "<stdin>"
{ cout << "Found COLON: " << yytext << endl; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 146 "<stdin>"
{ cout << "Found TWO_COLON: " << yytext << endl; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "<stdin>"
{ currentCommentString.clear(); BEGIN(ML_COMMENT); } 
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "<stdin>"
{ currentCommentString += yytext; } 
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "<stdin>"
{ currentCommentString += yytext; } 
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 152 "<stdin>"
{ currentCommentString += yytext; } 
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "<stdin>"
{ cout << "Found ML_COMMENT: " << currentCommentString << endl; BEGIN(INITIAL); } 
	YY_BREAK
case YY_STATE_EOF(ML_COMMENT):
#line 154 "<stdin>"
{ cout << "ML_COMMENT Error\n"; BEGIN(INITIAL);} 
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 156 "<stdin>"
{ cout << "Found COMMENT: " << string{yytext + 2} << endl; } 
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 158 "<stdin>"
{ currentString.clear(); BEGIN(STRING); } 
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 159 "<stdin>"
{ currentString += yytext; } 
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 160 "<stdin>"
{ } 
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 161 "<stdin>"
{ currentString += "\n"; } 
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 162 "<stdin>"
{ currentString += "\r"; } 
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 163 "<stdin>"
{ currentString += "\t"; } 
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 164 "<stdin>"
{ currentString += "\0"; } 
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 165 "<stdin>"
{ currentString += "\\"; } 
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 166 "<stdin>"
{ currentString += "\""; } 
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 167 "<stdin>"
{ 
    int x = strtol(yytext + 3,NULL, 16);  
    char tmp[2]; 
    tmp[0] = x; 
    tmp[1] = 0; 
    currentString += tmp;   
} 
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 174 "<stdin>"
{ 
    char result[2]; 
    convertCharacterCodeToString(yytext, 2, result);   
    currentString += result;    
} 
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 179 "<stdin>"
{ cout << "Found STRING: " << currentString << " " << currentString.size() << endl; BEGIN(INITIAL);} 
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 180 "<stdin>"
{ cout << "STRING Error: there is no closing quotation mark\n"; BEGIN(INITIAL);} 
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 182 "<stdin>"
{currentString.clear(); octothorpeCount = strlen(yytext) - 2; BEGIN(SHIELD_STRING);} 
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 183 "<stdin>"
{ currentString += yytext; } 
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 184 "<stdin>"
{ } 
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 185 "<stdin>"
{ 
    int tmp  = strlen(yytext) - 1; 
    if(tmp == octothorpeCount) 
    { 
        cout << "Found STRING: " << currentString << endl; BEGIN(INITIAL); 
    } 
    else 
    { 
         currentString += yytext; 
    } 
 
} 
	YY_BREAK
case YY_STATE_EOF(SHIELD_STRING):
#line 197 "<stdin>"
{ cout << "SHIELD_STRING Error: there is no closing quotation mark\n"; BEGIN(INITIAL);} 
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 200 "<stdin>"
{ currentString.clear(); BEGIN(CHAR); } 
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 201 "<stdin>"
{ 
    char result[2]; 
    convertCharacterCodeToString(yytext, 2, result);     
    cout << "Found CHAR - (" << result << ")"<< endl;
    BEGIN(INITIAL);
} 
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 207 "<stdin>"
{ currentString += yytext; } 
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 208 "<stdin>"
{  currentString += "\\";  } 
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 209 "<stdin>"
{ currentString += "\n"; } 
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 210 "<stdin>"
{ currentString += "\r"; } 
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 211 "<stdin>"
{  currentString += "\t"; } 
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 212 "<stdin>"
{  currentString += "\0" ; } 
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 213 "<stdin>"
{  currentString += "\'"; } 
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 214 "<stdin>"
{  currentString += "\""; } 
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 215 "<stdin>"
{ 
    int x = strtol(yytext + 3,NULL, 16);  
    char tmp[2]; 
    tmp[0] = x; 
    tmp[1] = 0; 
    currentString += tmp;   
} 
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 222 "<stdin>"
{ 
    if(currentString.size() == 1) { 
            cout << "Found CHAR: (" << currentString << ")" << endl; 
        } 
    else 
        { 
            cout << "CHAR Error: (" << currentString << ")" << endl; 
        } 
        BEGIN(INITIAL); 
} 
	YY_BREAK
case YY_STATE_EOF(CHAR):
#line 232 "<stdin>"
{
    cout << "CHAR Error: there is no closing quotation mark (" << currentString << ")" << endl; 
    BEGIN(INITIAL);
    } 
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 238 "<stdin>"
{ 
    string number_string = yytext;
    removeCharacterFromString(number_string, '_'); 
    removeSubstringFromString(number_string, "i32");
    removeSubstringFromString(number_string, "i64");    
    from_chars(number_string.c_str(), number_string.c_str() + number_string.size(), currentInteger);
    cout << "Found DECIMAL_NUMBER:" << to_string(currentInteger) << endl; 
} 
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 247 "<stdin>"
{  
    string number_string = yytext;
    removeCharacterFromString(number_string, '_'); 
    removeSubstringFromString(number_string, "i32");
    removeSubstringFromString(number_string, "i64");   
    from_chars(number_string.c_str()+2, number_string.c_str() + number_string.size(), currentInteger, 2);
    cout << "Found BINARY_NUMBER:" << to_string(currentInteger) << endl;     
} 
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 256 "<stdin>"
{ 
    string number_string = yytext;
    removeCharacterFromString(number_string, '_'); 
    removeSubstringFromString(number_string, "i32");
    removeSubstringFromString(number_string, "i64");   
    from_chars(number_string.c_str()+2, number_string.c_str() + number_string.size(), currentInteger, 8);
    cout << "Found OCT_NUMBER:" << to_string(currentInteger) << endl; 
} 
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 265 "<stdin>"
{ 
    string number_string = yytext;
    removeCharacterFromString(number_string, '_'); 
    removeSubstringFromString(number_string, "i32");
    removeSubstringFromString(number_string, "i64");   
    from_chars(number_string.c_str()+2, number_string.c_str() + number_string.size(), currentInteger, 16);
    cout << "Found HEX_NUMBER:" << to_string(currentInteger) << endl;
} 
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 274 "<stdin>"
{     
    string number_string = yytext;
    removeCharacterFromString(number_string, '_'); 
    removeSubstringFromString(number_string, "f32");
    removeSubstringFromString(number_string, "f64");   
    from_chars(number_string.c_str(), number_string.c_str() + number_string.size(), currentFloat);
    cout << "Found DOUBLE:" << to_string(currentFloat) << endl;    
} 
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 283 "<stdin>"
{ 
    string number_string = yytext;
    removeCharacterFromString(number_string, '_'); 
    removeSubstringFromString(number_string, "f32");
    removeSubstringFromString(number_string, "f64");   
    from_chars(number_string.c_str(), number_string.c_str() + number_string.size(), currentFloat);
    cout << "Found DOUBLE:" << to_string(currentFloat) << endl;
} 
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 292 "<stdin>"
{ cout << "Found IDENTIFIER: " <<  yytext << endl;} 
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 293 "<stdin>"
{ cout << "Found MACROS: " << yytext << endl;} 
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 294 "<stdin>"
{ cout << "Error: incorrect IDENTIFIER" << endl; } 
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 295 "<stdin>"
{ cout << "Error: incorrect character in code" << endl; } 
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 297 "<stdin>"
ECHO;
	YY_BREAK
#line 1891 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 338 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 338 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 337);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 297 "<stdin>"

 
void convertCharacterCodeToString(char characterCode[], int startPosition, char *result) 
{ 
    result[0] = strtol(characterCode + startPosition,NULL, 16); 
    result[1] = '\0'; 
} 
 
 
void removeSubstringFromString(std::string& str, const std::string& substr) {
    size_t pos;   
    while ((pos = str.find(substr)) != std::string::npos) {
        str.erase(pos, substr.length());  
    }
}
 
void removeCharacterFromString(string& str, char ch) {
   const auto newLast = remove(str.begin(), str.end(), ch);
   str.erase(newLast, str.end());
}

int main() { 
 
    //if (argc != 2) { 
    //    printf("Filename is not found"); 
    //    return 1; 
    //} 
 
    //const char *filename= argv[1]; 
 
    //FILE *file = fopen(filename, "r"); 
    //if (file == NULL) { 
    //    printf("File opening error"); 
    //    return 1; 
    //} 
 
    //yyin = file; 
    yylex(); 
    //fclose(file); 
 
    return 0; 
}
